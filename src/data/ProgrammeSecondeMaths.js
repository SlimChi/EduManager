import React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Container, Badge, Card, Accordion, ListGroup } from 'react-bootstrap';
import {
    FiBook, FiClock, FiList, FiArrowRight, FiBarChart2,
    FiPercent, FiCode, FiDollarSign, FiShapes, FiCheckCircle,
    FiAward, FiActivity, FiUsers, FiEdit, FiLayers
} from 'react-icons/fi';
import BackButton from "../components/navigation/BackButton";
import { motion } from 'framer-motion';

const ProgrammeSecondeMaths = () => {
    const { classId } = useParams();
    const navigate = useNavigate();

    // Structure du programme avec ajout d'ic√¥nes et couleurs
    const programme = {
        description: {
            title: "Math√©matiques - Seconde Professionnelle",
            content: "Programme complet pour la formation math√©matique en seconde professionnelle",
            emoji: "üßÆ",
            color: "#5f27cd"
        },
        preambule: {
            title: "Pr√©ambule commun",
            emoji: "üìú",
            color: "#1dd1a1",
            sections: [
                {
                    title: "Intentions majeures",
                    emoji: "üéØ",
                    icon: <FiAward size={18} />,
                    content: [
                        "Consolider le socle commun de connaissances, comp√©tences et culture",
                        "Former √† l'activit√© math√©matique et scientifique",
                        "Fournir des outils utiles pour les enseignements g√©n√©raux et professionnels",
                        "Assurer les bases n√©cessaires pour la poursuite d'√©tudes",
                        "D√©velopper des comp√©tences transversales",
                        "Donner une culture scientifique et civique"
                    ]
                },
                {
                    title: "Comp√©tences travaill√©es",
                    emoji: "üí™",
                    icon: <FiActivity size={18} />,
                    content: [
                        "S'approprier (rechercher, extraire et organiser l'information)",
                        "Analyser/Raisonner (√©mettre des conjectures, proposer des m√©thodes)",
                        "R√©aliser (mettre en ≈ìuvre des d√©marches, calculer, exp√©rimenter)",
                        "Valider (interpr√©ter des r√©sultats, argumenter, d√©montrer)",
                        "Communiquer (rendre compte, expliquer des d√©marches)"
                    ]
                },
                {
                    title: "Lignes directrices",
                    emoji: "üß≠",
                    icon: <FiEdit size={18} />,
                    content: [
                        "La bivalence (coh√©rence entre math√©matiques et physique-chimie)",
                        "La ma√Ætrise de la langue fran√ßaise",
                        "La co-intervention avec les enseignements professionnels",
                        "La diversit√© des activit√©s de l'√©l√®ve",
                        "La trace √©crite (synth√®se d√©contextualis√©e)",
                        "Le travail exp√©rimental ou num√©rique",
                        "L'√©valuation des acquis"
                    ]
                }
            ]
        },
        organisation: {
            title: "Organisation du programme",
            emoji: "üóÇÔ∏è",
            color: "#ff6b6b",
            icon: <FiLayers size={18} />,
            content: [
                "Statistique et probabilit√©s (2 modules)",
                "Alg√®bre - Analyse (3 modules)",
                "G√©om√©trie (1 module)",
                "Compl√©ments : Automatismes, Algorithmique et programmation, Vocabulaire ensembliste et logique"
            ]
        },
        chapitres: [
            {
                id: "stats",
                title: "Statistique et probabilit√©s",
                emoji: "üìä",
                icon: <FiBarChart2 size={18} />,
                color: "#ff6b6b",
                duration: "20h",
                sequences: 3
            },
            {
                id: "algebre",
                title: "Alg√®bre ‚Äì Analyse",
                emoji: "‚ûó",
                icon: <FiPercent size={18} />,
                color: "#48dbfb",
                duration: "30h",
                sequences: 8
            },
            {
                id: "geometrie",
                title: "G√©om√©trie",
                emoji: "üìê",
                icon: <FiArrowRight size={18} />,
                color: "#1dd1a1",
                duration: "15h",
                sequences: 4
            },
            {
                id: "algo",
                title: "Algorithmique",
                emoji: "üíª",
                icon: <FiCode size={18} />,
                color: "#5f27cd",
                duration: "10h",
                sequences: 3
            },
            {
                id: "Calculs_commerciaux",
                title: "Calculs financiers",
                emoji: "üí∞",
                icon: <FiDollarSign size={18} />,
                color: "#feca57",
                duration: "10h",
                sequences: 3
            }
        ],
        domaines: [
            {
                id: "stats",
                title: "Statistique et probabilit√©s",
                emoji: "üìä",
                color: "#ff6b6b",
                modules: [
                    {
                        title: "Statistique √† une variable",
                        emoji: "üìà",
                        objectifs: [
                            "Favoriser la prise d'initiative et la conduite de raisonnements",
                            "Interpr√©ter, analyser ou comparer des s√©ries statistiques"
                        ],
                        capacites: [
                            "Recueillir et organiser des donn√©es statistiques",
                            "Repr√©senter des s√©ries statistiques (diagrammes en secteurs, b√¢tons, etc.)",
                            "Comparer des s√©ries avec indicateurs de position et de dispersion",
                            "Construire et interpr√©ter des diagrammes en bo√Æte"
                        ],
                        connaissances: [
                            "Regroupement par classes",
                            "Indicateurs de position : mode, moyenne, m√©diane, quartiles",
                            "Indicateurs de dispersion : √©tendue, √©cart type, √©cart interquartile",
                            "Diagrammes en bo√Æte √† moustaches"
                        ]
                    },
                    {
                        title: "Probabilit√©s",
                        emoji: "üé≤",
                        objectifs: [
                            "Formaliser les notions √©l√©mentaires de probabilit√©s",
                            "Faire percevoir la loi des grands nombres exp√©rimentalement"
                        ],
                        capacites: [
                            "Observer la fluctuation des fr√©quences",
                            "R√©aliser des simulations informatiques",
                            "Estimer des probabilit√©s √† partir de fr√©quences",
                            "Calculer des probabilit√©s dans des cas simples"
                        ],
                        connaissances: [
                            "Vocabulaire des probabilit√©s (exp√©rience al√©atoire, √©v√©nement, etc.)",
                            "Fluctuation d'une fr√©quence sur des √©chantillons",
                            "Stabilisation des fr√©quences vers la probabilit√©",
                            "D√©nombrements (tableaux, arbres)"
                        ]
                    }
                ]
            },
            {
                id: "algebre",
                title: "Alg√®bre - Analyse",
                emoji: "‚ûó",
                color: "#48dbfb",
                modules: [
                    {
                        title: "√âquations du 1er degr√©",
                        emoji: "üßÆ",
                        objectifs: [
                            "Traduire un probl√®me par une √©quation ou in√©quation",
                            "√âtudier et r√©soudre ces √©quations/in√©quations"
                        ],
                        capacites: [
                            "Traduire un probl√®me par une √©quation/in√©quation",
                            "R√©soudre alg√©briquement ou graphiquement",
                            "Choisir une m√©thode de r√©solution adapt√©e"
                        ],
                        connaissances: [
                            "√âquations du premier degr√©",
                            "In√©quations du premier degr√©",
                            "Intervalles de ‚Ñù"
                        ]
                    },
                    {
                        title: "Fonctions",
                        emoji: "üìâ",
                        objectifs: [
                            "Consolider la notion de fonction",
                            "Exploiter diff√©rents registres (alg√©brique, graphique)",
                            "√âtudier des fonctions de r√©f√©rence",
                            "Mod√©liser des probl√®mes concrets"
                        ],
                        capacites: [
                            "Utiliser diff√©rents modes de repr√©sentation",
                            "D√©terminer images et ant√©c√©dents",
                            "√âtudier des variations de fonctions",
                            "R√©soudre f(x) = c ou f(x) < c",
                            "Travailler avec des fonctions affines et carr√©"
                        ],
                        connaissances: [
                            "Fonctions lin√©aires et affines",
                            "Tableaux de variations",
                            "Courbes repr√©sentatives",
                            "Fonction carr√© et ses variations",
                            "Syst√®mes d'√©quations"
                        ]
                    },
                ]
            },
            {
                id: "Calculs_commerciaux",
                title: "Calculs financiers",
                emoji: "üí∞",
                color: "#feca57",
                modules: [
                    {
                        title: "Calculs financiers",
                        emoji: "üí∏",
                        objectifs: [
                            "Ma√Ætriser les pourcentages dans des contextes professionnels",
                            "Travailler sur des calculs financiers de base"
                        ],
                        capacites: [
                            "Compl√©ter des documents professionnels (factures, devis)",
                            "Calculer des int√©r√™ts simples",
                            "D√©terminer des taux ou dur√©es de placement"
                        ],
                        connaissances: [
                            "Pourcentages et coefficients multiplicateurs",
                            "Capital, taux, int√©r√™t, valeur acquise"
                        ]
                    }
                ]
            },
            {
                id: "geometrie",
                title: "G√©om√©trie",
                emoji: "üìê",
                color: "#1dd1a1",
                modules: [
                    {
                        title: "G√©om√©trie",
                        emoji: "‚ñ≥",
                        objectifs: [
                            "R√©soudre des probl√®mes g√©om√©triques",
                            "D√©velopper la vision dans l'espace",
                            "R√©activer les propri√©t√©s de g√©om√©trie plane"
                        ],
                        capacites: [
                            "Reconna√Ætre et nommer des solides usuels",
                            "Calculer des longueurs, angles, aires et volumes",
                            "Travailler avec des agrandissements/r√©ductions",
                            "Utiliser les th√©or√®mes de Pythagore et Thal√®s"
                        ],
                        connaissances: [
                            "Solides usuels (cube, pyramide, cylindre, etc.)",
                            "Figures planes usuelles",
                            "Th√©or√®mes de Pythagore et Thal√®s",
                            "Formules de p√©rim√®tre, aire et volume"
                        ]
                    }
                ]
            }
        ],
        complements: [
            {
                id: "algo",
                title: "Algorithmique",
                emoji: "üíª",
                color: "#5f27cd",
                icon: <FiCode size={18} />,
                content: [
                    "Consolider les comp√©tences en algorithmique",
                    "Passer progressivement √† Python",
                    "D√©velopper la programmation modulaire",
                    "Travailler sur :",
                    "- Analyse et d√©composition de probl√®mes",
                    "- Instructions conditionnelles et boucles",
                    "- Types de variables",
                    "- Fonctions informatiques"
                ]
            },
            {
                id: "automatismes",
                title: "Automatismes",
                emoji: "‚ö°",
                color: "#ff9ff3",
                icon: <FiCheckCircle size={18} />,
                content: [
                    "Calcul de fr√©quences et pourcentages",
                    "Calculs avec puissances de 10",
                    "Manipulation de fractions",
                    "D√©veloppement et factorisation",
                    "R√©solution d'√©quations simples",
                    "Conversions d'unit√©s",
                    "Configurations de Pythagore et Thal√®s",
                    "Calculs d'aires et volumes"
                ]
            },
            {
                id: "vocabulaire",
                title: "Vocabulaire logique",
                emoji: "üî§",
                color: "#48dbfb",
                icon: <FiBook size={18} />,
                content: [
                    "Notations ensemblistes (‚àà, ‚äÇ, ‚à©, ‚à™)",
                    "Intervalles de nombres r√©els",
                    "Connecteurs logiques (et, ou)",
                    "Quantificateurs",
                    "Implications et √©quivalences",
                    "Raisonnement par l'absurde",
                    "Utilisation de contre-exemples"
                ]
            }
        ]
    };

    const handleChapitreClick = (chapitreId) => {
        navigate(`/programmes/math/${classId}/ProgrammeSecondeMaths/sequences/${chapitreId}`);
    };

    // Animation variants
    const cardVariants = {
        hover: {
            y: -5,
            boxShadow: "0 10px 20px rgba(0,0,0,0.1)"
        }
    };

    return (
        <Container className="programme-container py-4">
            <BackButton />

            {/* En-t√™te du programme */}
            <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
            >
                <Card className="mb-4 border-0 shadow-sm" style={{ backgroundColor: '#f8f9fa' }}>
                    <Card.Body className="d-flex align-items-center">
                        <div className="me-3 display-4" style={{ color: programme.description.color }}>
                            {programme.description.emoji}
                        </div>
                        <div>
                            <h2 className="mb-1">{programme.description.title}</h2>
                            <p className="mb-0 text-muted">{programme.description.content}</p>
                        </div>
                    </Card.Body>
                </Card>
            </motion.div>

            {/* Pr√©ambule */}
            <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.2, duration: 0.5 }}
            >
                <Accordion className="mb-4">
                    <Accordion.Item eventKey="0" className="border-0">
                        <Accordion.Header className="p-0">
                            <div className="d-flex align-items-center">
                                <div
                                    className="d-flex align-items-center justify-content-center me-3"
                                    style={{
                                        width: "40px",
                                        height: "40px",
                                        borderRadius: "8px",
                                        backgroundColor: `${programme.preambule.color}20`,
                                        color: programme.preambule.color
                                    }}
                                >
                                    <span style={{ fontSize: "20px" }}>{programme.preambule.emoji}</span>
                                </div>
                                <h4 className="mb-0">{programme.preambule.title}</h4>
                            </div>
                        </Accordion.Header>
                        <Accordion.Body className="p-0 pt-3">
                            {programme.preambule.sections.map((section, index) => (
                                <Card key={index} className="mb-3 border-0 shadow-sm">
                                    <Card.Body>
                                        <div className="d-flex align-items-center mb-3">
                                            <div
                                                className="d-flex align-items-center justify-content-center me-3"
                                                style={{
                                                    width: "36px",
                                                    height: "36px",
                                                    borderRadius: "8px",
                                                    backgroundColor: `${programme.preambule.color}10`,
                                                    color: programme.preambule.color
                                                }}
                                            >
                                                <span style={{ fontSize: "18px" }}>{section.emoji}</span>
                                            </div>
                                            <h5 className="mb-0">{section.title}</h5>
                                        </div>
                                        <ul className="mb-0">
                                            {section.content.map((item, i) => (
                                                <li key={i} className="mb-2 d-flex align-items-start">
                                                    <span className="me-2" style={{ color: programme.preambule.color }}>‚Ä¢</span>
                                                    {item}
                                                </li>
                                            ))}
                                        </ul>
                                    </Card.Body>
                                </Card>
                            ))}
                        </Accordion.Body>
                    </Accordion.Item>
                </Accordion>
            </motion.div>

            {/* Organisation du programme */}
            <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.3, duration: 0.5 }}
            >
                <Card className="mb-4 border-0 shadow-sm">
                    <Card.Body>
                        <div className="d-flex align-items-center mb-3">
                            <div
                                className="d-flex align-items-center justify-content-center me-3"
                                style={{
                                    width: "40px",
                                    height: "40px",
                                    borderRadius: "8px",
                                    backgroundColor: `${programme.organisation.color}20`,
                                    color: programme.organisation.color
                                }}
                            >
                                <span style={{ fontSize: "20px" }}>{programme.organisation.emoji}</span>
                            </div>
                            <h4 className="mb-0">{programme.organisation.title}</h4>
                        </div>
                        <p className="mb-3">{programme.organisation.description}</p>
                        <ul className="mb-0">
                            {programme.organisation.content.map((item, index) => (
                                <li key={index} className="mb-2 d-flex align-items-start">
                                    <span className="me-2" style={{ color: programme.organisation.color }}>‚Ä¢</span>
                                    {item}
                                </li>
                            ))}
                        </ul>
                    </Card.Body>
                </Card>
            </motion.div>

            {/* Chapitres principaux */}
            <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.4, duration: 0.5 }}
            >
                <h3 className="mb-4 d-flex align-items-center">
                    <FiBook className="me-2" />
                    Chapitres du Programme
                </h3>

                <div className="row g-4">
                    {programme.chapitres.map((chapitre) => (
                        <motion.div
                            key={chapitre.id}
                            className="col-md-6 col-lg-4"
                            whileHover="hover"
                            variants={cardVariants}
                        >
                            <Card
                                className="h-100 shadow-sm border-0"
                                style={{
                                    borderRadius: "12px",
                                    borderTop: `4px solid ${chapitre.color}`,
                                    cursor: "pointer"
                                }}
                                onClick={() => handleChapitreClick(chapitre.id)}
                            >
                                <Card.Body className="d-flex flex-column">
                                    <div className="d-flex align-items-center mb-3">
                                        <div
                                            className="d-flex align-items-center justify-content-center me-3"
                                            style={{
                                                width: "48px",
                                                height: "48px",
                                                borderRadius: "10px",
                                                backgroundColor: `${chapitre.color}20`,
                                                color: chapitre.color
                                            }}
                                        >
                                            <span style={{ fontSize: "24px" }}>{chapitre.emoji}</span>
                                        </div>
                                        <div>
                                            <h5 className="mb-0 fw-bold">{chapitre.title}</h5>
                                        </div>
                                    </div>

                                    <div className="d-flex justify-content-between mb-3">
                                        <Badge pill bg="light" text="dark" className="d-flex align-items-center">
                                            <FiClock className="me-1" /> {chapitre.duration}
                                        </Badge>
                                        <Badge pill bg="light" text="dark" className="d-flex align-items-center">
                                            <FiList className="me-1" /> {chapitre.sequences} s√©q.
                                        </Badge>
                                    </div>

                                    <div className="mt-auto text-end">
                                        <small className="text-primary fw-bold d-flex align-items-center justify-content-end">
                                            Explorer <FiArrowRight className="ms-1" />
                                        </small>
                                    </div>
                                </Card.Body>
                            </Card>
                        </motion.div>
                    ))}
                </div>
            </motion.div>

            {/* Domaines du programme */}
            <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.5, duration: 0.5 }}
            >
                <h3 className="mt-5 mb-4 d-flex align-items-center">
                    <FiBook className="me-2" />
                    Domaines du Programme
                </h3>

                <div className="row g-4">
                    {programme.domaines.map((domaine) => (
                        <div key={domaine.id} className="col-md-6 col-lg-3">
                            <Card className="h-100 shadow-sm border-0">
                                <Card.Body className="d-flex flex-column">
                                    <div className="d-flex align-items-center mb-3">
                                        <div
                                            className="d-flex align-items-center justify-content-center me-3"
                                            style={{
                                                width: "48px",
                                                height: "48px",
                                                borderRadius: "10px",
                                                backgroundColor: `${domaine.color}20`,
                                                color: domaine.color
                                            }}
                                        >
                                            <span style={{ fontSize: "24px" }}>{domaine.emoji}</span>
                                        </div>
                                        <div>
                                            <h5 className="mb-0 fw-bold">{domaine.title}</h5>
                                        </div>
                                    </div>

                                    <Accordion flush>
                                        {domaine.modules.map((module, i) => (
                                            <Accordion.Item key={`module-${i}`} eventKey={i.toString()} className="border-0">
                                                <Accordion.Header className="p-0 bg-transparent">
                                                    <div className="d-flex align-items-center">
                                                        <span className="me-2" style={{ fontSize: "18px" }}>{module.emoji}</span>
                                                        <small className="fw-bold">{module.title}</small>
                                                    </div>
                                                </Accordion.Header>
                                                <Accordion.Body className="p-0 pt-2">
                                                    <div className="mb-3">
                                                        <h6 className="small fw-bold">Objectifs:</h6>
                                                        <ul className="small mb-2">
                                                            {module.objectifs.map((obj, j) => (
                                                                <li key={`obj-${i}-${j}`}>{obj}</li>
                                                            ))}
                                                        </ul>
                                                    </div>
                                                    <div className="mb-3">
                                                        <h6 className="small fw-bold">Capacit√©s:</h6>
                                                        <ul className="small mb-2">
                                                            {module.capacites.map((cap, j) => (
                                                                <li key={`cap-${i}-${j}`}>{cap}</li>
                                                            ))}
                                                        </ul>
                                                    </div>
                                                    <div>
                                                        <h6 className="small fw-bold">Connaissances:</h6>
                                                        <ul className="small mb-0">
                                                            {module.connaissances.map((con, j) => (
                                                                <li key={`con-${i}-${j}`}>{con}</li>
                                                            ))}
                                                        </ul>
                                                    </div>
                                                </Accordion.Body>
                                            </Accordion.Item>
                                        ))}
                                    </Accordion>
                                </Card.Body>
                            </Card>
                        </div>
                    ))}
                </div>
            </motion.div>

            {/* Compl√©ments */}
            <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.6, duration: 0.5 }}
            >
                <h3 className="mt-5 mb-4 d-flex align-items-center">
                    <FiBook className="me-2" />
                    Compl√©ments
                </h3>

                <div className="row g-4">
                    {programme.complements.map((complement) => (
                        <div key={complement.id} className="col-md-4">
                            <Card className="h-100 shadow-sm border-0">
                                <Card.Body className="d-flex flex-column">
                                    <div className="d-flex align-items-center mb-3">
                                        <div
                                            className="d-flex align-items-center justify-content-center me-3"
                                            style={{
                                                width: "48px",
                                                height: "48px",
                                                borderRadius: "10px",
                                                backgroundColor: `${complement.color}20`,
                                                color: complement.color
                                            }}
                                        >
                                            <span style={{ fontSize: "24px" }}>{complement.emoji}</span>
                                        </div>
                                        <div>
                                            <h5 className="mb-0 fw-bold">{complement.title}</h5>
                                        </div>
                                    </div>

                                    <ul className="mb-0">
                                        {complement.content.map((item, i) => (
                                            <li key={`item-${i}`} className="mb-1 small">
                                                {item.startsWith("- ") ? (
                                                    <span className="ms-3 d-block">{item}</span>
                                                ) : (
                                                    item
                                                )}
                                            </li>
                                        ))}
                                    </ul>
                                </Card.Body>
                            </Card>
                        </div>
                    ))}
                </div>
            </motion.div>
        </Container>
    );
};

export default ProgrammeSecondeMaths;